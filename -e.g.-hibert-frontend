<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hilbert Mesh Frontend</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #222;
            color: #eee;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            background-color: #333;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        }
        h1, h2 {
            color: #5cb85c;
            text-align: center;
        }
        .connection-status {
            text-align: center;
            font-weight: bold;
            margin-bottom: 20px;
        }
        #messages {
            border: 1px solid #555;
            min-height: 200px;
            max-height: 400px;
            overflow-y: scroll;
            padding: 10px;
            background-color: #444;
            margin-bottom: 20px;
            border-radius: 4px;
        }
        .message-input {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }
        .message-input input[type="text"] {
            flex-grow: 1;
            padding: 8px;
            border: 1px solid #555;
            border-radius: 4px;
            background-color: #555;
            color: #eee;
        }
        .message-input button {
            padding: 8px 15px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .message-input button:hover {
            background-color: #45a049;
        }
        .msg-from-gos427 {
            color: #add8e6; /* Light blue */
        }
        .msg-from-gpt {
            color: #ffb6c1; /* Light pink */
        }
        .msg-system {
            color: #f0e68c; /* Khaki */
        }
        .disconnect-btn {
            display: block;
            width: 100%;
            padding: 10px;
            background-color: #f44336;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-align: center;
        }
        .disconnect-btn:hover {
            background-color: #d32f2f;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Hilbert Mesh Frontend</h1>
        <div class="connection-status">
            Connection Status: <span id="status">Disconnected</span>
        </div>

        <h2>Messages</h2>
        <div id="messages"></div>

        <div class="message-input">
            <input type="text" id="gos427Input" placeholder="Message from GOS-427">
            <button onclick="sendMessage('gos427')">Send as GOS-427</button>
        </div>
        <div class="message-input">
            <input type="text" id="gptInput" placeholder="Message from GPT Agent">
            <button onclick="sendMessage('gpt')">Send as GPT Agent</button>
        </div>
        <button class="disconnect-btn" onclick="disconnectSocket()">Disconnect</button>
    </div>

    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    <script>
        // *** IMPORTANT: Your Render backend URL is now inserted below ***
        // Your backend is deployed at: https://bubble-gum-and-duct-tape.onrender.com
        const BACKEND_URL = 'https://bubble-gum-and-duct-tape.onrender.com'; 

        const messagesDiv = document.getElementById('messages');
        const statusSpan = document.getElementById('status');
        let socket;

        function appendMessage(sender, message, type) {
            const msgElement = document.createElement('p');
            msgElement.innerHTML = `<strong>${sender}:</strong> ${message}`;
            msgElement.classList.add(type);
            messagesDiv.appendChild(msgElement);
            messagesDiv.scrollTop = messagesDiv.scrollHeight; // Auto-scroll to bottom
        }

        function connectSocket() {
            if (socket && socket.connected) {
                console.log('Socket already connected.');
                return;
            }

            statusSpan.textContent = 'Connecting...';
            statusSpan.style.color = 'orange';
            messagesDiv.innerHTML = ''; // Clear old messages

            socket = io(BACKEND_URL);

            socket.on('connect', () => {
                console.log('Connected to backend!');
                statusSpan.textContent = 'Connected';
                statusSpan.style.color = 'lightgreen';
                appendMessage('System', 'Connected to the Hilbert Mesh Backend.', 'msg-system');
            });

            socket.on('disconnect', () => {
                console.log('Disconnected from backend!');
                statusSpan.textContent = 'Disconnected';
                statusSpan.style.color = 'red';
                appendMessage('System', 'Disconnected from the Hilbert Mesh Backend.', 'msg-system');
            });

            socket.on('connect_error', (err) => {
                console.error('Connection Error:', err.message);
                statusSpan.textContent = 'Connection Error';
                statusSpan.style.color = 'red';
                appendMessage('System', `Connection Error: ${err.message}`, 'msg-system');
            });

            // Listen for messages from the backend
            socket.on('relay_from_gos427', (data) => {
                appendMessage('GOS-427 (Relayed)', data.message, 'msg-from-gos427');
            });

            socket.on('relay_from_gpt', (data) => {
                appendMessage('GPT Agent (Relayed)', data.message, 'msg-from-gpt');
            });
        }

        function sendMessage(senderType) {
            let inputElement;
            let messageData;
            let eventName;

            if (senderType === 'gos427') {
                inputElement = document.getElementById('gos427Input');
                eventName = 'message_from_gos427';
            } else if (senderType === 'gpt') {
                inputElement = document.getElementById('gptInput');
                eventName = 'message_from_gpt';
            } else {
                return;
            }

            const message = inputElement.value;
            if (message.trim() === '') {
                return;
            }

            messageData = { message: message };

            if (socket && socket.connected) {
                socket.emit(eventName, messageData);
                appendMessage(`Me as ${senderType.toUpperCase()}`, message, `msg-from-${senderType}`);
                inputElement.value = ''; // Clear input field
            } else {
                appendMessage('System', 'Not connected to the server. Please connect first.', 'msg-system');
            }
        }

        function disconnectSocket() {
            if (socket && socket.connected) {
                socket.disconnect();
            } else {
                appendMessage('System', 'Already disconnected.', 'msg-system');
            }
        }

        // Connect automatically when the page loads
        document.addEventListener('DOMContentLoaded', connectSocket);
    </script>
</body>
</html>
